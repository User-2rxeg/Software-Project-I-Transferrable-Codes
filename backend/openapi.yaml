openapi: 3.0.3
info:
  title: HR / E-Learning API
  version: "1.0.0"
  description: |
    OpenAPI spec generated from your NestJS controllers & DTOs (User, Auth, Admin, Feedback, AuditLog, Backup).
    Sensitive fields (passwordHash, mfaSecret, mfaBackupCodes) are intentionally excluded from public response schemas.
servers:
  - url: http://localhost:3786
    description: Local dev

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    # -------------------------
    # User
    # -------------------------
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
          example: "Alice Example"
        email:
          type: string
          format: email
          example: "alice@example.com"
        password:
          type: string
          example: "P@ssw0rd!"
        role:
          type: string
          enum: [Student, Instructor, Admin]
          example: Student
        learningPreferences:
          type: array
          items:
            type: string
        subjectsOfInterest:
          type: array
          items:
            type: string
        expertise:
          type: array
          items:
            type: string
        profileImage:
          type: string
      required:
        - name
        - email
        - password

    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [Student, Instructor, Admin]
        profileImage:
          type: string

    PublicUserDto:
      type: object
      properties:
        _id:
          type: string
          example: "64b8f7a0c2f4e9b3f1a2d3c4"
        name:
          type: string
          example: "Alice Example"
        email:
          type: string
          format: email
          example: "alice@example.com"
        role:
          type: string
          example: "Student"
        isEmailVerified:
          type: boolean
          example: false
        unreadNotificationCount:
          type: integer
          example: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedUserDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PublicUserDto'
        total:
          type: integer
          example: 234
        page:
          type: integer
          example: 1
        pages:
          type: integer
          example: 12
        limit:
          type: integer
          example: 20

    # -------------------------
    # Auth
    # -------------------------
    LoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [email, password]

    RegisterDto:
      $ref: '#/components/schemas/CreateUserDto'

    RefreshTokenDto:
      type: object
      properties:
        refreshToken:
          type: string
      required: [refreshToken]

    AuthTokensDto:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOi..."
        refreshToken:
          type: string
          example: "def50200..."

    MfaSetupDto:
      type: object
      properties:
        otpauthUrl:
          type: string
        secret:
          type: string

    SimpleMessageDto:
      type: object
      properties:
        message:
          type: string
          example: "OTP sent to email"

    # -------------------------
    # Feedback
    # -------------------------
    CreateFeedbackDto:
      type: object
      properties:
        message:
          type: string
          maxLength: 4000
        contactEmail:
          type: string
          format: email
        category:
          type: string
          example: "general"
      required: [message]

    PublicFeedbackDto:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
          nullable: true
        message:
          type: string
        contactEmail:
          type: string
          nullable: true
        category:
          type: string
          example: general
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # -------------------------
    # Audit Log
    # -------------------------
    AuditEvent:
      type: string
      enum:
        - EMAIL_VERIFIED
        - USER_REGISTERED
        - USER_CHANGED_EMAIL
        - OTP_SENT
        - OTP_SEND_FAILED
        - LOGIN_SUCCESS
        - LOGIN_FAILED
        - LOGOUT
        - PASSWORD_RESET_REQUESTED
        - PASSWORD_RESET_COMPLETED
        - MFA_ENABLED
        - MFA_DISABLED
        - PASSWORD_CHANGED
        - PROFILE_UPDATED
        - UNAUTHORIZED_ACCESS
        - TOKEN_BLACKLISTED
        - RBAC_DENIED
        - ADMIN_CREATED_USER
        - ADMIN_USER_LOCK
        - ADMIN_USER_UNLOCK
        - ADMIN_FORCE_LOGOUT
        - ADMIN_ANNOUNCE_ALL
        - ROLE_CHANGED
        - ADMIN_ANNOUNCE_ROLE
        - ADMIN_DELETE_USER
        - DATA_EXPORT

    CreateAuditLogDto:
      type: object
      properties:
        userId:
          type: string
        event:
          $ref: '#/components/schemas/AuditEvent'
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
      required:
        - event

    UpdateAuditLogDto:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/AuditEvent'
        details:
          type: object
          additionalProperties: true

    PublicAuditDto:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        event:
          $ref: '#/components/schemas/AuditEvent'
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time

    # -------------------------
    # Admin DTOs
    # -------------------------
    UpdateUserRoleBodyDto:
      type: object
      properties:
        role:
          type: string
          enum: [Student, Instructor, Admin]
      required: [role]

    AnnounceAllDto:
      type: object
      properties:
        message:
          type: string
      required: [message]

    AnnounceRoleDto:
      type: object
      properties:
        role:
          type: string
          enum: [Student, Instructor, Admin]
        message:
          type: string
      required: [role, message]

    MetricsDto:
      type: object
      properties:
        totalUsers:
          type: integer
          example: 1024
        active30d:
          type: integer
          example: 923
        new7d:
          type: integer
          example: 12
        avgWeeklyLoginsPerUser:
          type: number
          example: 4.3
        lockedUsers:
          type: integer
          example: 3
        errorRatePercent:
          type: number
          example: 0.5

    SecurityOverviewDto:
      type: object
      properties:
        failedLogins:
          type: integer
          example: 120
        unauthorizedAttempts:
          type: integer
          example: 15
        distinctSuspiciousIps:
          type: integer
          example: 7
        windowFrom:
          type: string
          format: date-time
        windowTo:
          type: string
          format: date-time

    # -------------------------
    # Backup
    # -------------------------
    CreateBackupDto:
      type: object
      properties:
        name:
          type: string
        storage:
          type: string
          enum: [local, s3, both]
      example:
        name: nightly
        storage: local

    BackupMetadata:
      type: object
      properties:
        filename:
          type: string
        location:
          type: string
          enum: [local, s3]
        size:
          type: integer
        status:
          type: string
        createdAt:
          type: string
          format: date-time

  parameters:
    idParam:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: MongoDB ObjectId

paths:

  # -------------------------
  # Auth
  # -------------------------
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: User registered (may require email verification)
          content:
            application/json:
              schema:
                type: object

  /auth/verify-otp:
    post:
      tags:
        - auth
      summary: Verify registration/email OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                otp:
                  type: string
      responses:
        '200':
          description: OTP verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDto'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login with email + password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Auth tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensDto'

  /auth/refresh:
    post:
      tags:
        - auth
      summary: Exchange refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
      responses:
        '200':
          description: New tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensDto'

  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout (invalidate current token)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDto'

  /auth/send-otp:
    post:
      tags:
        - auth
      summary: Send OTP to email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendOtpDto'
      responses:
        '200':
          description: OTP sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDto'

  /auth/resend-otp:
    post:
      tags:
        - auth
      summary: Resend OTP to email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendOtpDto'
      responses:
        '200':
          description: OTP resent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDto'

  /auth/otp-status/{email}:
    get:
      tags:
        - auth
      summary: Check OTP status for email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OTP status
          content:
            application/json:
              schema:
                type: object

  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Request forgot password OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordDto'
      responses:
        '200':
          description: OTP sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDto'

  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset password using OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
      responses:
        '200':
          description: Password reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMessageDto'

  /auth/mfa/setup:
    post:
      tags:
        - auth
      summary: Initiate MFA setup (generate secret & otpauth)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: MFA setup info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaSetupDto'

  /auth/mfa/activate:
    post:
      tags:
        - auth
      summary: Activate MFA for current user (verify token)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaActivateDto'
      responses:
        '200':
          description: MFA activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "MFA enabled"

  /auth/mfa/verify-login:
    post:
      tags:
        - auth
      summary: Verify MFA during login (temp session)
      description: "Verify MFA during login flow. Provide the temporary token in Authorization header (bearer) as used by your TempJwtGuard."
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyLoginDto'
      responses:
        '200':
          description: Auth tokens after MFA verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokensDto'
  /auth/mfa/disable:
    post:
      tags:
        - auth
      summary: Disable MFA for current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: MFA disabled
          content:
            application/json:
              schema:
                type: object

  # -------------------------
  # User
  # -------------------------
  /users/name/{name}:
    get:
      tags:
        - users
      summary: Find user by name
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDto'

  /users/me:
    get:
      tags:
        - users
      summary: Get current logged-in user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDto'
    patch:
      tags:
        - users
      summary: Update current user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDto'
    delete:
      tags:
        - users
      summary: Delete current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Delete result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /users/search:
    get:
      tags:
        - users
      summary: Search users (Instructor/Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: role
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserDto'

  /users/search-instructors:
    get:
      tags:
        - users
      summary: Search instructors (Admin/Student)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Paginated users (role=Instructor)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserDto'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: User by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDto'

  /users/autocomplete/{q}:
    get:
      tags:
        - users
      summary: Autocomplete users (name/email suggestions)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Suggestions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    email:
                      type: string

  /users/{id}/unread/increment:
    post:
      tags:
        - users
      summary: Increment unread notification counter
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: No content

  /users/{id}/unread/reset:
    post:
      tags:
        - users
      summary: Reset unread notification counter
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: No content

  # -------------------------
  # Feedback
  # -------------------------
  /feedback:
    post:
      tags:
        - feedback
      summary: Submit feedback (public)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackDto'
      responses:
        '201':
          description: Feedback submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicFeedbackDto'

  /feedback/admin:
    get:
      tags:
        - feedback
      summary: List feedback (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Paginated feedback list
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicFeedbackDto'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
                  limit:
                    type: integer

  # -------------------------
  # Audit Log
  # -------------------------
  /audit:
    post:
      tags:
        - audit
      summary: Create an audit log entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuditLogDto'
      responses:
        '201':
          description: Created audit log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicAuditDto'
    get:
      tags:
        - audit
      summary: List audit entries (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: userId
          in: query
          schema:
            type: string
        - name: event
          in: query
          schema:
            type: string
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Paginated audit logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicAuditDto'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
                  limit:
                    type: integer

  /audit/{id}:
    get:
      tags:
        - audit
      summary: Get a single audit entry
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Audit entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicAuditDto'
    patch:
      tags:
        - audit
      summary: Update an audit entry
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAuditLogDto'
      responses:
        '200':
          description: Updated audit entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicAuditDto'
    delete:
      tags:
        - audit
      summary: Delete an audit entry
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Delete result
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean

  /audit/purge/older-than/{days}:
    delete:
      tags:
        - audit
      summary: Purge audit entries older than X days
      security:
        - bearerAuth: []
      parameters:
        - name: days
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Purge result
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedCount:
                    type: integer

  /audit/security/failed-logins:
    get:
      tags:
        - audit
      summary: List failed login events
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Failed logins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicAuditDto'

  /audit/security/unauthorized:
    get:
      tags:
        - audit
      summary: List unauthorized access events
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Unauthorized access events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicAuditDto'

  /audit/event/{event}:
    get:
      tags:
        - audit
      summary: List audit events by type
      security:
        - bearerAuth: []
      parameters:
        - name: event
          in: path
          required: true
          schema:
            type: string
            enum:
              - EMAIL_VERIFIED
              - USER_REGISTERED
              - USER_CHANGED_EMAIL
              - OTP_SENT
              - OTP_SEND_FAILED
              - LOGIN_SUCCESS
              - LOGIN_FAILED
              - LOGOUT
              - PASSWORD_RESET_REQUESTED
              - PASSWORD_RESET_COMPLETED
              - MFA_ENABLED
              - MFA_DISABLED
              - PASSWORD_CHANGED
              - PROFILE_UPDATED
              - UNAUTHORIZED_ACCESS
              - TOKEN_BLACKLISTED
              - RBAC_DENIED
              - ADMIN_CREATED_USER
              - ADMIN_USER_LOCK
              - ADMIN_USER_UNLOCK
              - ADMIN_FORCE_LOGOUT
              - ADMIN_ANNOUNCE_ALL
              - ROLE_CHANGED
              - ADMIN_ANNOUNCE_ROLE
              - ADMIN_DELETE_USER
              - DATA_EXPORT
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Audit logs by event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicAuditDto'

  /audit/user/{userId}:
    get:
      tags:
        - audit
      summary: List audit events for a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Audit logs for user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicAuditDto'

  # -------------------------
  # Admin
  # -------------------------
  /admin/create-user:
    post:
      tags:
        - admin
      summary: Create a user as admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDto'

  /admin/{id}:
    patch:
      tags:
        - admin
      summary: Update user by id
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDto'
    delete:
      tags:
        - admin
      summary: Delete user by id
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean

  /admin/{id}/soft-delete:
    post:
      tags:
        - admin
      summary: Soft-delete user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Soft-deleted
          content:
            application/json:
              schema:
                type: object

  /admin/{id}/restore:
    post:
      tags:
        - admin
      summary: Restore soft-deleted user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Restored
          content:
            application/json:
              schema:
                type: object

  /admin/users:
    get:
      tags:
        - admin
      summary: List users (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
        - name: verified
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserDto'

  /admin/users/{id}/role:
    patch:
      tags:
        - admin
      summary: Update user role
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRoleBodyDto'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserDto'

  /admin/users/export:
    get:
      tags:
        - admin
      summary: Export users CSV (download)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: CSV file response (binary)
          content:
            text/csv:
              schema:
                type: string
                format: binary

  /admin/metrics:
    get:
      tags:
        - admin
      summary: Admin metrics summary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDto'

  /admin/security:
    get:
      tags:
        - admin
      summary: Security overview
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Security overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityOverviewDto'

  /admin/announce/all:
    post:
      tags:
        - admin
      summary: Send announcement to all users
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnounceAllDto'
      responses:
        '200':
          description: Announcement queued
          content:
            application/json:
              schema:
                type: object

  /admin/announce/role:
    post:
      tags:
        - admin
      summary: Send announcement to a role
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnounceRoleDto'
      responses:
        '200':
          description: Announcement queued
          content:
            application/json:
              schema:
                type: object

  /admin/users/{id}/lock:
    patch:
      tags:
        - admin
      summary: Lock a user (prevent login)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Locked
          content:
            application/json:
              schema:
                type: object

  /admin/users/{id}/unlock:
    patch:
      tags:
        - admin
      summary: Unlock a user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Unlocked
          content:
            application/json:
              schema:
                type: object

  # -------------------------
  # Backup
  # -------------------------
  /backups:
    post:
      tags:
        - backups
      summary: Create a backup (admin)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackupDto'
      responses:
        '201':
          description: Backup metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupMetadata'
    get:
      tags:
        - backups
      summary: List backups
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Backup list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackupMetadata'

  /backups/{id}/restore:
    post:
      tags:
        - backups
      summary: Restore a backup by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Restore started/completed
          content:
            application/json:
              schema:
                type: object

  /backups/{id}:
    delete:
      tags:
        - backups
      summary: Delete backup metadata + file
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object

  /backups/download/{filename}:
    get:
      tags:
        - backups
      summary: Download backup file (admin)
      security:
        - bearerAuth: []
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

tags:
  - name: auth
    description: Authentication endpoints (login, register, OTP, MFA)
  - name: users
    description: User management endpoints
  - name: admin
    description: Admin-only endpoints (user management, announcements, exports, metrics)
  - name: feedback
    description: Public feedback endpoints and admin listing
  - name: audit
    description: Audit log records for security and compliance
  - name: backups
    description: Database backup/restore endpoints (admin)
